# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  repositories:
  - repository: AlgoNws
    type: Git
    name: ALGO-NWS
  - repository: AlgoGos
    type: Git
    name: ALGO-GOS
  - repository: AlgoShared
    type: Git
    name: ALGO-SHARED

trigger: none
# - main

strategy:
  matrix:

    'NWS Win32 x64':
      # The name of the region (will be in the app title and the setup executable)
      region: "nws"
      # The algorithm to use (the name of the algorithm directory in src/main)
      algo: "algo-uscadi"

    'GOS Win32 x64':
      region: "gos"
      algo: "algo-gos"

variables:
  - group: AZURE_VARS

pool:
  vmImage: windows-latest

jobs:
  - job: buildApplication
    displayName: Build application for ${region}
    steps:
      - checkout: self
        submodules: true

      # Frontend
      # -------

      - script: |
          (cd src/renderer && npm install && npm run build)
        displayName: 'Build the renderer'

      # Application
      # -------

      - script: npm install
        displayName: NPM install App

      # NWS - WIN
      # =========


      # Signed package
      # --------------

      # Package for signing
      - script: |
          node tools/activate-algo.js ${algo}
          npx electron-forge package --arch=x64 --platform=win32
        displayName: "Build package for signing"

      # Sign the executable(s) in the output folder
      - task: TrustedSigning@0
        displayName: "Sign the executable"
        inputs:
          AzureTenantID: $(TENANT_ID)
          AzureClientID: $(CLIENT_ID)
          AzureClientSecret: $(CLIENT_SECRET)
          Endpoint: $(ENDPOINT)
          CodeSigningAccountName: $(CODE_SIGNING_ACCOUNT_NAME)
          CertificateProfileName: $(CERTIFICATE_PROFILE_NAME)

          TimestampRfc3161: 'http://timestamp.acs.microsoft.com'
          TimestampDigest: SHA256

          FilesFolder: $(System.DefaultWorkingDirectory)/out/commonid-tool-win32-x64
          FilesFolderRecurse: true
          FileDigest: SHA256
          FilesFolderFilter: exe

          ExcludeAzureCliCredential: true
          ExcludeAzurePowerShellCredential: true
          ExcludeInteractiveBrowserCredential: true
          ExcludeManagedIdentityCredential: true
          ExcludeSharedTokenCacheCredential: true
          ExcludeVisualStudioCodeCredential: true
          ExcludeVisualStudioCredential: true
          ExcludeEnvironmentCredential: false


      # Winstaller
      # ----------

      # Attempt to build the "Winstaller"
      - script: |
          node build-windows-installer.js ${region}
        displayName: "Build Installer from signed output"

      # Sign the installer
      - task: TrustedSigning@0
        displayName: "Code sign the application"
        inputs:
          AzureTenantID: $(TENANT_ID)
          AzureClientID: $(CLIENT_ID)
          AzureClientSecret: $(CLIENT_SECRET)
          Endpoint: $(ENDPOINT)
          CodeSigningAccountName: $(CODE_SIGNING_ACCOUNT_NAME)
          CertificateProfileName: $(CERTIFICATE_PROFILE_NAME)

          TimestampRfc3161: 'http://timestamp.acs.microsoft.com'
          TimestampDigest: SHA256

          FilesFolder: $(System.DefaultWorkingDirectory)/out/installer-win32-x64
          FilesFolderRecurse: true
          FileDigest: SHA256
          FilesFolderFilter: exe

          ExcludeAzureCliCredential: true
          ExcludeAzurePowerShellCredential: true
          ExcludeInteractiveBrowserCredential: true
          ExcludeManagedIdentityCredential: true
          ExcludeSharedTokenCacheCredential: true
          ExcludeVisualStudioCodeCredential: true
          ExcludeVisualStudioCredential: true
          ExcludeEnvironmentCredential: false

      # Publish the signed zip as an artifact
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(System.DefaultWorkingDirectory)/out/installer-win32-x64
          artifactName: app-${region}-win-installer-signed
        displayName: Publish app-${region}-win-installer-signed
        enabled: true

      # Signed zip
      # ----------

      # package the signed zip
      - task: ArchiveFiles@2
        displayName: "Pack the signed ZIP"
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/out/commonid-tool-win32-x64'
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/out/signed-commonid-tool-win32-x64-${region}.zip'
          verbose: true
          quiet: false

      # Publish the signed zip as an artifact
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(System.DefaultWorkingDirectory)/out/signed-commonid-tool-win32-x64-${region}.zip
          artifactName: app-${region}-win-zip-signed
        displayName: Publish app-${region}-win-zip-signed
        enabled: true

      # Installer and unsigned zip building
      # -----------------------------------

      # - script: |
      #     npx electron-forge make --arch=x64 --platform=win32
      #   displayName: "Build app-nws-win"

      # # Publish the unsigned zip as an artifact
      # - task: PublishBuildArtifacts@1
      #   inputs:
      #     pathtoPublish: $(System.DefaultWorkingDirectory)/out/make/zip/win32/x64
      #     artifactName: app-nws-win-zip-unsigned
      #   displayName: Publish app-nws-win-zip-unsigned
      #   enabled: true


      # # Sign the installer
      # - task: TrustedSigning@0
      #   displayName: "Code sign the application"
      #   inputs:
      #     AzureTenantID: $(TENANT_ID)
      #     AzureClientID: $(CLIENT_ID)
      #     AzureClientSecret: $(CLIENT_SECRET)
      #     Endpoint: $(ENDPOINT)
      #     CodeSigningAccountName: $(CODE_SIGNING_ACCOUNT_NAME)
      #     CertificateProfileName: $(CERTIFICATE_PROFILE_NAME)

      #     TimestampRfc3161: 'http://timestamp.acs.microsoft.com'
      #     TimestampDigest: SHA256

      #     FilesFolder: $(System.DefaultWorkingDirectory)/out/make/squirrel.windows/x64
      #     FilesFolderRecurse: true
      #     FileDigest: SHA256
      #     FilesFolderFilter: exe

      #     ExcludeAzureCliCredential: true
      #     ExcludeAzurePowerShellCredential: true
      #     ExcludeInteractiveBrowserCredential: true
      #     ExcludeManagedIdentityCredential: true
      #     ExcludeSharedTokenCacheCredential: true
      #     ExcludeVisualStudioCodeCredential: true
      #     ExcludeVisualStudioCredential: true
      #     ExcludeEnvironmentCredential: false

      # # Publishing should either be to Azure Blob storage (to be set up) or via Releases
      # - task: PublishBuildArtifacts@1
      #   inputs:
      #     pathtoPublish: $(System.DefaultWorkingDirectory)/out/make/squirrel.windows/x64
      #     artifactName: app-nws-win
      #   displayName: Publish app-nws-win
      #   enabled: true









      # # GOS - WIN
      # # =========


      # # Package for signed zip
      # - script: |
      #     node tools/activate-algo.js algo-gos
      #     npx electron-forge package --arch=x64 --platform=win32
      #   displayName: "Package app-gos-win"

      # # Sign the executable(s) in the output folder
      # - task: TrustedSigning@0
      #   displayName: "Sign the executable in the ZIP"
      #   inputs:
      #     AzureTenantID: $(TENANT_ID)
      #     AzureClientID: $(CLIENT_ID)
      #     AzureClientSecret: $(CLIENT_SECRET)
      #     Endpoint: $(ENDPOINT)
      #     CodeSigningAccountName: $(CODE_SIGNING_ACCOUNT_NAME)
      #     CertificateProfileName: $(CERTIFICATE_PROFILE_NAME)

      #     TimestampRfc3161: 'http://timestamp.acs.microsoft.com'
      #     TimestampDigest: SHA256

      #     FilesFolder: $(System.DefaultWorkingDirectory)/out/commonid-tool-win32-x64
      #     FilesFolderRecurse: true
      #     FileDigest: SHA256
      #     FilesFolderFilter: exe

      #     ExcludeAzureCliCredential: true
      #     ExcludeAzurePowerShellCredential: true
      #     ExcludeInteractiveBrowserCredential: true
      #     ExcludeManagedIdentityCredential: true
      #     ExcludeSharedTokenCacheCredential: true
      #     ExcludeVisualStudioCodeCredential: true
      #     ExcludeVisualStudioCredential: true
      #     ExcludeEnvironmentCredential: false


      # # package the signed zip
      # - task: ArchiveFiles@2
      #   displayName: "Pack the signed ZIP"
      #   inputs:
      #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/out/commonid-tool-win32-x64'
      #     includeRootFolder: true
      #     archiveType: 'zip'
      #     archiveFile: '$(System.DefaultWorkingDirectory)/out/signed-commonid-tool-win32-x64-gos.zip'
      #     verbose: true
      #     quiet: false

      # # Publish the signed zip as an artifact
      # - task: PublishBuildArtifacts@1
      #   inputs:
      #     pathtoPublish: $(System.DefaultWorkingDirectory)/out/signed-commonid-tool-win32-x64-gos.zip
      #     artifactName: app-gos-win-zip-signed
      #   displayName: Publish app-gos-win-zip-signed
      #   enabled: true

      # # Installer and unsigned zip building
      # # -----------------------------------

      # - script: |
      #     npx electron-forge make --arch=x64 --platform=win32
      #   displayName: "Build app-gos-win"

      # # Publish the unsigned zip as an artifact
      # - task: PublishBuildArtifacts@1
      #   inputs:
      #     pathtoPublish: $(System.DefaultWorkingDirectory)/out/make/zip/win32/x64
      #     artifactName: app-gos-win-zip-unsigned
      #   displayName: Publish app-gos-win-zip-unsigned
      #   enabled: true


      # # Sign the installer
      # - task: TrustedSigning@0
      #   displayName: "Code sign the application"
      #   inputs:
      #     AzureTenantID: $(TENANT_ID)
      #     AzureClientID: $(CLIENT_ID)
      #     AzureClientSecret: $(CLIENT_SECRET)
      #     Endpoint: $(ENDPOINT)
      #     CodeSigningAccountName: $(CODE_SIGNING_ACCOUNT_NAME)
      #     CertificateProfileName: $(CERTIFICATE_PROFILE_NAME)

      #     TimestampRfc3161: 'http://timestamp.acs.microsoft.com'
      #     TimestampDigest: SHA256

      #     FilesFolder: $(System.DefaultWorkingDirectory)/out/make/squirrel.windows/x64
      #     FilesFolderRecurse: true
      #     FileDigest: SHA256
      #     FilesFolderFilter: exe

      #     ExcludeAzureCliCredential: true
      #     ExcludeAzurePowerShellCredential: true
      #     ExcludeInteractiveBrowserCredential: true
      #     ExcludeManagedIdentityCredential: true
      #     ExcludeSharedTokenCacheCredential: true
      #     ExcludeVisualStudioCodeCredential: true
      #     ExcludeVisualStudioCredential: true
      #     ExcludeEnvironmentCredential: false

      # # Publishing should either be to Azure Blob storage (to be set up) or via Releases
      # - task: PublishBuildArtifacts@1
      #   inputs:
      #     pathtoPublish: $(System.DefaultWorkingDirectory)/out/make/squirrel.windows/x64
      #     artifactName: app-gos-win
      #   displayName: Publish app-gos-win
      #   enabled: true



      - script: ls -laR out/
        displayName: Lets look at the output

    uses:
      repositories:
      - AlgoNws
      - AlgoGos
      - AlgoShared

