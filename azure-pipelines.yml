# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  repositories:
  - repository: AlgoNws
    type: Git
    name: ALGO-NWS
  - repository: AlgoGos
    type: Git
    name: ALGO-GOS
  - repository: AlgoShared
    type: Git
    name: ALGO-SHARED

trigger: none
# - main

variables:
  - group: AZURE_VARS

pool:
  vmImage: windows-latest

jobs:
  - job: buildApplication
    displayName: Build Application
    steps:
      - checkout: self
        submodules: true

      # Frontend
      # -------

      - script: |
          (cd src/renderer && npm install && npm run build)
        displayName: 'Build the renderer'

      # Application
      # -------

      - script: npm install
        displayName: NPM install App

      # NWS - WIN

      - script: |
          node tools/activate-algo.js algo-uscadi
          npx electron-forge make --arch=x64 --platform=win32
        displayName: "Build app-nws-win"

      # Publish the yet unsigned zip as an artifact
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(System.DefaultWorkingDirectory)/out/make/zip/win32/x64
          artifactName: app-nws-win-zip-unsigned
        displayName: Publish app-nws-win-zip-unsigned
        enabled: true

      # Signed zip building
      # -------------------

      # As the build directory at this point (after the 'make' run) is contaminated with Squirell stuff
      # we unzip -> sign -> re-zip the output of the zip builder
      - script: |
          mkdir out/zip-sign-nws
          mkdir out/zip-signed-nws
        displayName: "Create directories for unzipping and re-packing"

      # The 'unzip' unix command fails with error code "1", so use Devops extraction
      - task: ExtractFiles@1
        displayName: "Extract the archive"
        inputs:
          archiveFilePatterns: '${System.DefaultWorkingDirectory}/out/make/zip/win32/x64/*.zip'
          destinationFolder: '${System.DefaultWorkingDirectory}/out/zip-sign-nws'
          cleanDestinationFolder: true


      # Sign the executable(s) in the output folder
      - task: TrustedSigning@0
        displayName: "Code sign the application"
        inputs:
          AzureTenantID: $(TENANT_ID)
          AzureClientID: $(CLIENT_ID)
          AzureClientSecret: $(CLIENT_SECRET)
          Endpoint: $(ENDPOINT)
          CodeSigningAccountName: $(CODE_SIGNING_ACCOUNT_NAME)
          CertificateProfileName: $(CERTIFICATE_PROFILE_NAME)

          TimestampRfc3161: 'http://timestamp.acs.microsoft.com'
          TimestampDigest: SHA256

          FilesFolder: $(System.DefaultWorkingDirectory)/out/zip-sign-nws
          FilesFolderRecurse: true
          FileDigest: SHA256
          FilesFolderFilter: exe

          ExcludeAzureCliCredential: true
          ExcludeAzurePowerShellCredential: true
          ExcludeInteractiveBrowserCredential: true
          ExcludeManagedIdentityCredential: true
          ExcludeSharedTokenCacheCredential: true
          ExcludeVisualStudioCodeCredential: true
          ExcludeVisualStudioCredential: true
          ExcludeEnvironmentCredential: false


      - task: ArchiveFiles@2
        displayName: "Re-pack the signed archive"
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/out/zip-sign-nws' # string. Required. Root folder or file to archive. Default: $(Build.BinariesDirectory).
          includeRootFolder: false # boolean. Prepend root folder name to archive paths. Default: true.
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/out/zip-signed-nws/signed-commonid-tool-win32-nws.zip' # string. Required. Archive file to create. Default: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip.
          #replaceExistingArchive: true # boolean. Replace existing archive. Default: true.
          verbose: true # boolean. Force verbose output. Default: false.
          quiet: false # boolean. Force quiet output. Default: false.

      # Publish the signed zip as an artifact
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(System.DefaultWorkingDirectory)/out/zip-signed-nws/signed-commonid-tool-win32-nws.zip'
          artifactName: app-nws-win-zip-signed
        displayName: Publish app-nws-win-zip-signed
        enabled: true



      # Sign the installer
      - task: TrustedSigning@0
        displayName: "Code sign the application"
        inputs:
          AzureTenantID: $(TENANT_ID)
          AzureClientID: $(CLIENT_ID)
          AzureClientSecret: $(CLIENT_SECRET)
          Endpoint: $(ENDPOINT)
          CodeSigningAccountName: $(CODE_SIGNING_ACCOUNT_NAME)
          CertificateProfileName: $(CERTIFICATE_PROFILE_NAME)
          
          TimestampRfc3161: 'http://timestamp.acs.microsoft.com'
          TimestampDigest: SHA256
          
          FilesFolder: $(System.DefaultWorkingDirectory)/out/make/squirrel.windows/x64
          FilesFolderRecurse: true
          FileDigest: SHA256
          FilesFolderFilter: exe

          ExcludeAzureCliCredential: true
          ExcludeAzurePowerShellCredential: true
          ExcludeInteractiveBrowserCredential: true
          ExcludeManagedIdentityCredential: true
          ExcludeSharedTokenCacheCredential: true
          ExcludeVisualStudioCodeCredential: true
          ExcludeVisualStudioCredential: true
          ExcludeEnvironmentCredential: false

      # Publishing should either be to Azure Blob storage (to be set up) or via Releases
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(System.DefaultWorkingDirectory)/out/make/squirrel.windows/x64
          artifactName: app-nws-win
        displayName: Publish app-nws-win
        enabled: true

      # GOS - WIN

      - script: |
          node tools/activate-algo.js algo-gos
          npx electron-forge make --arch=x64 --platform=win32
        displayName: "Build app-gos-win"

      # Publish the yet unsigned zip as an artifact
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(System.DefaultWorkingDirectory)/out/make/zip/win32/x64
          artifactName: app-gos-win-zip-unsigned
        displayName: Publish app-gos-win-zip-unsigned
        enabled: true


      - task: TrustedSigning@0
        displayName: "Code sign the application"
        inputs:
          AzureTenantID: $(TENANT_ID)
          AzureClientID: $(CLIENT_ID)
          AzureClientSecret: $(CLIENT_SECRET)
          Endpoint: $(ENDPOINT)
          CodeSigningAccountName: $(CODE_SIGNING_ACCOUNT_NAME)
          CertificateProfileName: $(CERTIFICATE_PROFILE_NAME)
          
          TimestampRfc3161: 'http://timestamp.acs.microsoft.com'
          TimestampDigest: SHA256
          
          FilesFolder: $(System.DefaultWorkingDirectory)/out/make/squirrel.windows/x64
          FilesFolderRecurse: true
          FileDigest: SHA256
          FilesFolderFilter: exe
  
          ExcludeAzureCliCredential: true
          ExcludeAzurePowerShellCredential: true
          ExcludeInteractiveBrowserCredential: true
          ExcludeManagedIdentityCredential: true
          ExcludeSharedTokenCacheCredential: true
          ExcludeVisualStudioCodeCredential: true
          ExcludeVisualStudioCredential: true
          ExcludeEnvironmentCredential: false

      # Publishing should either be to Azure Blob storage (to be set up) or via Releases
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(System.DefaultWorkingDirectory)/out/make/squirrel.windows/x64
          artifactName: app-gos-win
        displayName: Publish app-gos-win
        enabled: true


      - script: ls -laR out/
        displayName: Lets look at the output

    uses:
      repositories:
      - AlgoNws
      - AlgoGos
      - AlgoShared

